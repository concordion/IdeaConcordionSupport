{
  parserClass="org.concordion.plugin.idea.lang.ConcordionParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Concordion"
  psiImplClassSuffix="Impl"
  psiPackage="org.concordion.plugin.idea.lang.psi"
  psiImplPackage="org.concordion.plugin.idea.lang.psi"

  elementTypeHolderClass="org.concordion.plugin.idea.lang.psi.ConcordionTypes"
  elementTypeClass="org.concordion.plugin.idea.lang.ConcordionElementType"
  tokenTypeClass="org.concordion.plugin.idea.lang.ConcordionTokenType"

  tokens = [
    LPARENTH="("
    RPARENTH=")"
    LBRACKET="["
    RBRACKET="]"
    LBRACE="{"
    RBRACE="}"
    DOT="."
    COMA=","
    HASH="#"
    EQ="="
    COLON=":"
    SEMICOLON=";"
  ]
}

file ::= statement*

statement ::= embeddedCommand? (DICTIONARY|setExpression|iterateExpression|ognlExpressionStart|EXAMPLE_NAME)

embeddedCommand ::= COMMAND '='

setExpression ::= variable '=' ognlExpressionStart
iterateExpression ::= variable ':' ognlExpressionStart

ognlExpressionStart ::= (literal|list|map|method|field|variable) index* ('.' ognlExpressionNext)?
ognlExpressionNext ::= (method|field) index* ('.' ognlExpressionNext)*

method ::= IDENTIFIER '(' arguments ')' {
  implements="org.concordion.plugin.idea.lang.psi.ConcordionMethodInternal"
  extends="org.concordion.plugin.idea.lang.psi.ConcordionMethodInternalImpl"
}
field ::= IDENTIFIER {
  implements="org.concordion.plugin.idea.lang.psi.ConcordionFieldInternal"
  extends="org.concordion.plugin.idea.lang.psi.ConcordionFieldInternalImpl"
}
variable ::= '#' IDENTIFIER {
  implements="org.concordion.plugin.idea.lang.psi.ConcordionVariableInternal"
  extends="org.concordion.plugin.idea.lang.psi.ConcordionVariableInternalImpl"
}

literal ::= (STRING_LITERAL|DOUBLE_LITERAL|INTEGER_LITERAL)

list ::= '{' ognlExpressionStart? (',' ognlExpressionStart)* '}'

map ::=  '#' '{' mapEntry? (',' mapEntry)* '}'
mapEntry ::= ognlExpressionStart ':' ognlExpressionStart

arguments ::= ognlExpressionStart? (',' ognlExpressionStart)*
index ::= '[' ognlExpressionStart ']'

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.concordion.plugin.idea.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.concordion.plugin.idea.lang.psi.ConcordionTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>concordion.flex</tt>
 */
class ConcordionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 7, 2]
   * Total runtime size is 22376 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<7)|((ch>>2)&0x7f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\2\21\1\25\1\56\1\57\5\21\2\25\1\60\7\21"+
    "\1\61\1\62\20\21\1\25\1\63\1\21\1\64\40\21\1\65\5\21\1\66\11\21\1\67\1\70"+
    "\1\71\1\72\10\21\1\73\2\21\1\74\10\21\123\25\1\75\7\25\1\76\1\77\12\61\1\100"+
    "\24\21\1\25\1\101\u0582\21\1\102\u017f\21");

  /* The ZZ_CMAP_Y table has 8576 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\10\0\1\34"+
    "\1\35\1\36\1\37\1\3\1\40\1\36\1\3\5\41\1\42\7\41\1\42\162\41\1\43\1\44\2\41"+
    "\1\43\3\3\1\41\1\45\1\3\1\46\4\3\34\0\1\41\1\47\1\44\1\50\1\3\1\36\1\42\1"+
    "\47\4\41\1\51\24\41\1\51\42\41\1\52\1\0\1\44\47\41\2\53\1\54\10\41\1\42\1"+
    "\40\1\3\1\54\11\41\1\3\1\55\1\56\12\0\1\57\1\60\1\57\2\3\6\41\1\42\1\3\1\42"+
    "\3\3\1\0\1\61\1\55\1\3\2\0\1\62\1\3\12\41\1\63\7\0\1\35\1\44\1\64\30\41\1"+
    "\65\1\0\1\57\1\0\1\66\1\67\1\70\2\0\1\70\1\71\3\3\1\55\1\72\7\41\6\0\1\62"+
    "\1\54\25\41\1\73\2\0\1\74\3\3\2\0\1\70\7\41\1\63\2\0\1\43\1\36\1\3\5\41\1"+
    "\73\1\75\2\0\2\76\1\35\4\3\6\41\1\76\21\3\1\77\2\41\1\100\1\53\1\101\13\3"+
    "\6\0\1\62\1\0\15\41\1\73\1\102\4\0\1\76\1\0\2\41\1\73\1\34\2\0\1\54\1\41\1"+
    "\103\1\41\1\104\1\54\1\41\2\71\5\41\1\47\1\41\1\46\1\44\1\43\1\102\1\0\2\105"+
    "\1\106\1\3\1\55\1\3\1\51\1\73\1\34\2\0\1\73\1\3\1\55\1\3\1\56\1\54\1\42\1"+
    "\107\1\71\5\41\1\47\1\41\1\47\1\110\1\43\1\67\1\62\1\55\1\105\1\35\1\37\1"+
    "\3\1\54\1\46\1\3\1\34\2\0\1\70\1\111\2\3\1\56\1\54\1\41\2\51\5\41\1\47\1\41"+
    "\1\47\1\54\1\43\1\102\1\0\2\57\1\35\1\45\3\3\1\73\1\34\2\0\1\37\1\3\1\112"+
    "\1\3\1\56\1\54\1\41\2\71\5\41\1\47\1\41\1\47\1\54\1\43\1\102\1\0\2\105\1\35"+
    "\1\3\1\34\1\3\1\51\1\73\1\34\2\0\1\40\3\3\1\113\1\54\1\42\1\44\1\47\1\43\1"+
    "\110\1\47\1\107\1\45\1\42\1\44\2\41\1\43\1\34\1\62\1\34\1\67\1\35\1\45\1\55"+
    "\3\3\1\34\2\0\2\3\1\37\1\3\1\56\1\54\1\41\2\47\5\41\1\47\2\41\1\103\1\43\1"+
    "\65\1\0\2\67\1\35\1\3\1\60\1\114\1\3\1\73\1\34\2\0\4\3\1\34\1\54\1\41\2\47"+
    "\5\41\1\47\2\41\1\54\1\43\1\102\1\0\2\67\1\35\1\3\1\60\1\3\1\36\1\73\1\34"+
    "\2\0\1\110\3\3\1\34\1\54\1\41\2\47\11\41\1\42\1\65\1\0\2\67\1\106\1\3\1\55"+
    "\1\3\1\115\1\73\1\34\2\0\2\3\1\44\1\41\1\34\1\54\3\41\1\42\1\44\5\41\1\51"+
    "\2\41\1\40\1\41\1\42\1\116\1\55\1\0\1\117\2\0\4\3\1\34\3\3\1\54\13\41\1\72"+
    "\1\0\1\62\1\55\1\41\1\63\1\0\1\62\2\0\1\35\11\3\1\110\1\71\1\46\1\40\1\3\1"+
    "\41\1\54\1\41\1\54\1\120\1\44\1\54\1\72\1\0\1\57\1\74\1\41\1\46\1\0\1\35\2"+
    "\0\1\35\1\41\10\3\1\45\5\3\1\35\1\3\2\0\1\35\2\3\1\121\1\37\1\34\2\41\1\54"+
    "\10\41\1\45\1\56\4\0\1\67\1\41\1\76\2\0\1\56\10\0\1\61\1\3\1\116\16\3\12\41"+
    "\1\63\4\0\1\122\2\0\1\35\1\3\1\41\1\73\1\70\1\73\1\102\1\66\1\0\1\70\1\76"+
    "\1\64\2\41\1\73\2\0\1\75\3\0\1\35\11\41\1\51\1\3\1\40\12\41\1\42\123\41\1"+
    "\47\1\43\1\41\1\42\1\47\1\43\12\41\1\47\1\43\10\41\1\47\1\43\1\41\1\42\1\47"+
    "\1\43\3\41\1\42\16\41\1\47\1\43\20\41\1\42\1\56\10\3\4\41\4\3\25\41\1\123"+
    "\1\53\1\124\1\54\232\41\1\71\4\41\1\54\5\41\1\42\1\3\22\41\1\42\1\34\1\125"+
    "\1\53\1\101\1\3\3\41\1\47\1\73\1\61\2\3\4\41\1\73\1\61\2\3\4\41\1\73\3\3\3"+
    "\41\1\47\1\126\3\3\15\41\10\0\1\107\1\55\1\111\2\0\1\35\7\3\1\55\1\35\2\0"+
    "\1\35\1\3\26\41\2\3\12\41\1\127\1\3\21\41\1\43\2\3\7\41\1\130\3\0\1\3\3\0"+
    "\2\3\1\34\2\0\7\41\1\43\1\41\1\45\2\3\13\41\1\3\6\41\1\43\1\3\2\0\1\35\11"+
    "\3\5\41\1\63\1\0\1\3\15\41\1\76\1\0\1\62\7\0\1\105\2\0\1\35\1\3\2\0\1\35\2"+
    "\3\1\107\26\3\1\0\1\64\13\41\4\0\1\64\1\41\1\3\2\0\1\35\3\3\1\55\2\0\3\3\1"+
    "\122\7\41\1\76\2\0\1\70\2\0\1\70\12\41\1\73\3\0\3\3\11\41\5\0\2\3\2\0\1\35"+
    "\1\54\2\0\1\70\10\41\1\43\24\3\1\62\5\0\1\64\1\72\1\73\1\131\2\3\60\41\11"+
    "\0\1\62\5\3\1\0\105\41\1\43\1\41\1\43\11\41\1\43\1\41\1\43\2\41\2\120\7\41"+
    "\1\43\15\41\1\47\1\41\1\46\1\44\1\47\1\41\1\45\1\41\1\44\1\41\1\3\3\41\1\45"+
    "\1\44\1\47\1\41\1\45\2\3\1\55\1\0\6\3\1\132\1\62\3\3\1\55\1\61\4\3\1\61\2"+
    "\3\1\0\1\61\1\34\1\0\1\40\2\3\1\107\4\3\3\41\1\45\6\0\1\62\5\3\3\0\1\61\1"+
    "\37\1\56\2\0\1\61\3\3\1\36\1\107\1\44\2\41\1\40\1\54\1\43\1\3\1\46\1\47\1"+
    "\51\2\41\1\43\1\41\1\3\1\54\1\43\1\36\4\3\10\0\1\122\1\76\1\61\235\3\13\41"+
    "\1\42\13\41\1\42\41\41\1\45\1\107\1\63\1\70\3\3\11\41\1\51\1\3\1\40\16\41"+
    "\1\3\1\107\3\3\1\55\5\41\1\42\2\3\1\41\1\42\1\41\1\42\1\41\1\42\1\41\1\42"+
    "\1\41\1\42\1\41\1\42\1\41\1\42\1\41\1\42\10\0\13\3\1\107\165\3\1\133\6\3\1"+
    "\56\3\0\1\54\1\43\1\122\1\45\1\54\24\41\1\42\1\60\2\54\25\41\1\42\1\41\1\3"+
    "\1\54\11\41\1\43\1\54\26\41\1\42\4\3\6\41\1\42\15\3\361\41\1\43\22\3\163\41"+
    "\1\100\1\53\1\124\12\3\43\41\1\45\20\3\13\41\1\43\103\41\1\45\4\41\2\0\1\70"+
    "\5\3\13\41\1\63\1\3\2\0\1\134\6\41\1\53\1\135\21\41\1\73\2\0\1\35\10\3\1\107"+
    "\2\41\1\44\31\41\1\71\1\136\1\41\3\53\2\41\1\136\1\124\2\53\17\3\1\115\2\41"+
    "\2\137\1\63\5\41\1\63\1\0\4\3\1\61\1\3\15\41\3\3\1\70\14\41\4\0\1\61\2\3\2"+
    "\0\1\35\1\3\4\0\1\70\1\41\1\107\1\112\2\0\1\70\6\41\1\73\1\0\1\35\5\41\1\63"+
    "\3\0\3\3\7\41\1\45\1\0\13\41\1\63\3\0\1\61\2\3\1\107\2\0\1\35\1\3\1\53\1\140"+
    "\2\53\2\3\1\141\1\142\12\41\1\76\2\0\1\62\2\3\1\63\2\41\1\35\2\0\1\35\1\3"+
    "\5\41\1\42\1\143\1\141\14\41\1\102\1\66\1\64\1\73\1\127\5\3\1\107\1\43\2\41"+
    "\1\63\1\0\1\44\1\144\2\3\1\54\1\42\1\54\1\42\1\54\1\42\2\3\1\41\1\42\1\41"+
    "\1\42\12\53\1\142\2\53\1\124\2\3\24\53\10\41\1\63\1\0\1\62\1\35\2\0\1\35\1"+
    "\3\151\41\3\3\5\41\1\42\1\107\14\41\101\3\133\41\1\43\32\41\1\43\11\3\1\41"+
    "\1\42\2\3\1\107\1\41\1\3\1\145\2\41\1\47\2\41\1\42\1\41\1\46\1\51\1\47\32"+
    "\41\1\43\7\3\1\107\132\41\1\43\4\3\20\41\1\44\15\41\12\3\3\41\1\61\4\0\4\3"+
    "\1\0\1\62\2\3\1\55\1\61\5\3\1\56\6\3\1\37\1\3\1\41\1\47\41\41\1\146\1\3\1"+
    "\61\2\3\2\0\1\35\1\3\1\54\5\41\1\42\1\55\1\54\5\41\1\42\2\3\1\44\25\41\1\42"+
    "\1\44\1\41\1\44\1\41\1\44\1\41\1\44\1\45\1\35\1\60\4\3\1\56\1\3\3\41\1\54"+
    "\5\41\1\42\4\41\1\42\1\51\3\41\1\43\3\41\1\43\10\3\36\41\1\42\21\3\15\0\1"+
    "\61\41\3\1\37\40\3\7\41\1\45\14\41\1\45\13\3\7\41\1\136\4\3\4\41\1\72\1\41"+
    "\1\147\1\3\11\53\1\124\2\3\7\41\1\43\11\41\1\3\2\41\1\56\1\35\12\3\47\41\1"+
    "\43\2\0\1\35\25\3\12\53\2\3\15\53\47\3\115\53\1\142\2\3\5\53\1\124\2\3\2\53"+
    "\46\3\1\41\1\43\1\47\12\41\1\51\1\45\1\71\5\41\1\43\2\3\5\53\1\142\2\3\7\53"+
    "\1\142\20\3\4\53\1\142\1\124\2\3\5\41\1\43\2\3\6\41\1\43\21\3\16\41\1\3\1"+
    "\44\20\3\1\76\1\60\1\3\1\0\1\41\2\54\6\41\1\3\1\62\1\55\10\3\7\41\1\45\7\53"+
    "\1\101\10\3\2\53\1\150\6\53\1\101\6\3\15\41\1\43\2\3\5\41\1\43\2\3\4\41\1"+
    "\42\3\3\4\53\1\124\33\3\22\41\1\45\15\3\14\53\1\142\3\3\14\53\1\142\103\3"+
    "\1\122\15\41\3\0\1\62\7\3\1\34\2\0\4\3\1\122\13\41\2\0\1\62\1\37\4\3\6\41"+
    "\1\45\1\3\2\0\1\35\1\3\1\122\10\41\1\63\3\0\1\67\2\0\4\3\10\53\1\142\1\151"+
    "\2\3\1\122\13\41\1\63\3\0\1\64\1\45\2\3\2\0\1\152\1\101\10\3\4\53\1\153\6"+
    "\53\25\3\1\53\1\142\1\140\1\153\3\53\1\153\2\53\1\101\1\3\13\53\1\142\11\3"+
    "\1\150\1\53\2\154\5\53\1\140\1\53\1\140\1\150\1\124\1\112\4\3\1\101\2\3\1"+
    "\150\1\124\107\3\14\53\5\3\1\153\56\3\13\53\1\142\12\3\1\53\11\3\14\53\5\3"+
    "\1\101\16\3\12\41\1\63\3\0\2\3\2\0\1\35\15\3\6\53\1\124\141\3\20\53\7\3\1"+
    "\115\160\3\16\53\1\101\101\3\133\41\1\136\12\53\1\124\31\3\30\0\1\62\7\3\61"+
    "\53\57\3\13\41\1\42\164\3\221\53\1\142\156\3\16\41\1\45\1\3\7\53\1\142\34"+
    "\3\7\53\1\124\4\3\14\53\4\3\1\53\7\3\1\115\5\53\1\3\1\150\4\53\134\3\21\41"+
    "\1\45\2\3\1\76\12\0\1\62\3\3\1\55\1\122\3\41\30\3\1\43\177\3\32\53\1\142\1"+
    "\3\3\53\1\101\2\53\1\101\1\3\2\53\1\124\262\3\1\56\1\35\1\56\4\0\1\62\1\56"+
    "\1\0\7\3\1\34\1\35\44\3\1\34\1\61\156\3\25\41\1\47\21\41\1\47\1\36\1\110\1"+
    "\54\1\47\2\41\1\51\1\54\1\41\1\54\17\41\1\51\1\42\1\54\1\41\1\47\1\41\1\47"+
    "\6\41\1\51\1\42\1\41\1\46\1\44\1\41\1\47\124\41\1\43\6\41\1\47\5\41\1\42\7"+
    "\41\1\42\6\41\1\47\7\41\1\47\5\41\1\42\7\41\1\42\6\41\1\47\7\41\1\47\5\41"+
    "\1\42\2\41\1\34\14\0\61\53\1\101\116\3\1\41\1\54\6\41\1\110\1\71\1\54\1\41"+
    "\1\42\1\41\1\120\1\3\1\36\1\107\1\120\1\54\1\110\1\71\2\120\1\110\1\71\1\42"+
    "\1\41\1\42\1\41\1\54\1\46\2\41\1\51\4\41\1\3\2\54\1\51\4\41\121\3\65\41\1"+
    "\42\12\3\215\41\1\45\2\3\67\41\1\43\240\53\1\124\127\3\7\41\1\43\170\3\1\37"+
    "\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 436 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\4\1\3\1\15\1\64\1\3\1\15\2\4\4\0\1\3\2\0\1\61\1\4\2\0\1\13\1\52\1\53\1"+
    "\0\1\12\1\60\1\6\1\10\1\0\1\7\11\2\1\17\1\63\1\0\1\62\1\0\1\16\1\0\1\5\1\44"+
    "\1\5\1\41\1\20\1\33\4\5\1\47\1\5\1\45\2\5\1\30\3\5\1\26\1\36\5\5\1\54\1\14"+
    "\1\55\1\0\1\4\1\0\1\31\1\5\1\23\1\25\1\11\1\42\1\5\1\46\1\34\1\5\1\51\1\35"+
    "\1\40\1\37\1\27\1\22\2\5\1\32\1\24\1\43\2\5\1\21\1\50\1\5\1\56\1\0\1\57\1"+
    "\0\1\4\2\0\4\4\4\0\1\5\2\0\1\4\3\0\1\5\2\0\7\5\1\0\2\5\4\0\3\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\1\1\2\5\1\0\3\5\1\0\1\4\4\1\1\0\3\5\3\0\1\4\1\0\5"+
    "\4\1\0\1\4\1\0\2\4\1\0\1\4\3\0\3\4\1\0\3\5\2\4\3\5\1\0\1\5\3\4\2\5\2\4\1\0"+
    "\4\4\3\5\2\0\2\5\1\4\4\5\3\4\1\5\2\0\2\4\1\5\1\4\1\5\3\4\1\5\1\1\3\5\4\1\3"+
    "\0\1\4\1\5\2\4\1\1\3\5\1\1\4\4\2\0\3\4\1\5\4\0\1\5\1\0\2\5\1\0\1\5\1\4\3\0"+
    "\1\1\4\0\1\4\3\5\1\1\4\0\1\1\2\0\1\4\1\0\1\4\1\0\1\4\2\0\1\5\1\0\1\5\1\0\1"+
    "\4\1\0\4\4\2\5\1\1\2\0\2\1\2\0\1\4\3\1\1\5\1\0\2\4\1\5\1\4\1\5\1\0\1\5\2\1"+
    "\1\0\1\4\2\5\1\0\2\64\2\4\1\0\2\5\3\4\1\0\1\5\2\1\1\0\1\4\3\5\1\1\2\5\1\4"+
    "\1\5\1\1\1\0\2\1\2\0\5\1\3\0\1\5\1\4\1\5\2\4\2\0\1\5\1\4\2\5\2\0\1\4\2\5\1"+
    "\4\2\0\3\1\2\0\1\1\1\0\2\4\1\1\1\0\2\1\1\0\2\1\2\0\1\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\1\1\3\1\1"+
    "\1\4\1\6\1\7\1\10\1\11\7\3\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\2\24\1\0\1\1\2\7\7\3\4\24\1\10\6\3"+
    "\1\25\35\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\65\0\65\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u03ba\0\u03ef"+
    "\0\u0424\0\u01a8\0\65\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u0424"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u013e\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\7\1\2\1\13\1\2\1\5\1\14\1\15"+
    "\1\16\14\7\1\17\1\20\2\7\1\21\2\7\1\22"+
    "\2\7\1\23\1\7\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\70\0\1\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\6\0\32\3"+
    "\15\0\1\4\1\0\2\6\1\10\1\4\1\37\1\40"+
    "\5\0\1\41\1\40\31\6\16\0\1\5\11\0\1\5"+
    "\51\0\1\6\1\0\2\6\1\10\1\6\1\0\1\6"+
    "\5\0\1\41\32\6\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\7\5\0\1\41\32\7\15\0\1\10"+
    "\1\0\4\10\1\0\1\10\6\0\32\10\15\0\1\42"+
    "\1\0\2\6\1\10\1\42\1\37\1\40\5\0\1\41"+
    "\1\40\31\6\15\0\1\37\4\0\1\37\55\0\13\13"+
    "\1\43\1\44\1\0\47\13\2\0\1\7\1\0\2\7"+
    "\1\10\1\7\1\0\1\7\5\0\1\41\1\7\1\45"+
    "\30\7\15\0\1\7\1\0\2\7\1\10\1\7\1\0"+
    "\1\7\5\0\1\41\14\7\1\46\15\7\15\0\1\7"+
    "\1\0\2\7\1\10\1\7\1\0\1\7\5\0\1\41"+
    "\17\7\1\47\12\7\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\50\5\0\1\41\32\7\15\0\1\7"+
    "\1\0\2\7\1\10\1\7\1\0\1\51\5\0\1\41"+
    "\32\7\15\0\1\7\1\0\2\7\1\10\1\7\1\0"+
    "\1\52\5\0\1\41\32\7\15\0\1\7\1\0\2\7"+
    "\1\10\1\7\1\0\1\53\5\0\1\41\32\7\15\0"+
    "\1\37\4\0\1\37\1\0\1\54\6\0\1\54\46\0"+
    "\1\55\1\0\2\6\1\56\1\55\1\0\1\6\1\57"+
    "\4\0\1\41\32\6\15\0\1\60\1\0\4\60\1\0"+
    "\1\60\6\0\32\60\13\0\15\13\1\0\47\13\2\0"+
    "\1\7\1\0\2\7\1\10\1\7\1\0\1\7\5\0"+
    "\1\41\2\7\1\61\27\7\15\0\1\7\1\0\2\7"+
    "\1\10\1\7\1\0\1\7\5\0\1\41\17\7\1\62"+
    "\12\7\15\0\1\7\1\0\2\7\1\10\1\7\1\0"+
    "\1\7\5\0\1\41\14\7\1\63\15\7\15\0\1\7"+
    "\1\0\2\7\1\10\1\7\1\0\1\7\5\0\1\41"+
    "\22\7\1\64\7\7\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\7\5\0\1\41\12\7\1\65\17\7"+
    "\15\0\1\7\1\0\2\7\1\10\1\7\1\0\1\7"+
    "\5\0\1\41\30\7\1\66\1\7\15\0\1\7\1\0"+
    "\2\7\1\10\1\7\1\0\1\7\5\0\1\41\30\7"+
    "\1\67\1\7\15\0\1\57\3\0\2\57\2\0\1\57"+
    "\54\0\1\55\1\0\2\6\1\10\1\55\1\0\1\6"+
    "\5\0\1\41\32\6\15\0\1\56\1\0\3\10\1\56"+
    "\1\0\1\10\6\0\32\10\15\0\1\57\4\0\1\57"+
    "\57\0\1\7\1\0\2\7\1\10\1\7\1\0\1\70"+
    "\5\0\1\41\32\7\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\7\5\0\1\41\31\7\1\71\15\0"+
    "\1\7\1\0\2\7\1\10\1\7\1\0\1\7\5\0"+
    "\1\41\20\7\1\72\11\7\15\0\1\7\1\0\2\7"+
    "\1\10\1\7\1\0\1\7\5\0\1\41\11\7\1\73"+
    "\20\7\15\0\1\7\1\0\2\7\1\10\1\7\1\0"+
    "\1\7\5\0\1\41\4\7\1\66\25\7\15\0\1\7"+
    "\1\0\2\7\1\10\1\7\1\0\1\7\5\0\1\41"+
    "\25\7\1\74\4\7\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\7\5\0\1\41\3\7\1\75\26\7"+
    "\15\0\1\7\1\0\2\7\1\10\1\7\1\0\1\76"+
    "\5\0\1\41\32\7\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\7\5\0\1\41\2\7\1\77\27\7"+
    "\15\0\1\7\1\0\2\7\1\10\1\7\1\0\1\7"+
    "\5\0\1\41\23\7\1\100\6\7\15\0\1\7\1\0"+
    "\2\7\1\10\1\7\1\0\1\7\5\0\1\41\11\7"+
    "\1\101\20\7\15\0\1\7\1\0\2\7\1\10\1\7"+
    "\1\0\1\7\5\0\1\41\4\7\1\102\25\7\15\0"+
    "\1\7\1\0\2\7\1\10\1\7\1\0\1\7\5\0"+
    "\1\41\5\7\1\67\24\7\15\0\1\7\1\0\2\7"+
    "\1\10\1\7\1\0\1\7\5\0\1\41\15\7\1\103"+
    "\14\7\15\0\1\7\1\0\2\7\1\10\1\7\1\0"+
    "\1\7\5\0\1\41\15\7\1\104\14\7\15\0\1\7"+
    "\1\0\2\7\1\10\1\7\1\0\1\7\5\0\1\41"+
    "\4\7\1\105\25\7\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\106\5\0\1\41\32\7\15\0\1\7"+
    "\1\0\2\7\1\10\1\7\1\0\1\107\5\0\1\41"+
    "\32\7\15\0\1\7\1\0\2\7\1\10\1\7\1\0"+
    "\1\7\5\0\1\41\4\7\1\67\25\7\15\0\1\7"+
    "\1\0\2\7\1\10\1\7\1\0\1\7\5\0\1\41"+
    "\3\7\1\110\26\7\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\7\5\0\1\41\5\7\1\111\24\7"+
    "\15\0\1\7\1\0\2\7\1\10\1\7\1\0\1\7"+
    "\5\0\1\41\20\7\1\112\11\7\15\0\1\7\1\0"+
    "\2\7\1\10\1\7\1\0\1\7\5\0\1\41\26\7"+
    "\1\67\3\7\15\0\1\7\1\0\2\7\1\10\1\7"+
    "\1\0\1\7\5\0\1\41\6\7\1\113\23\7\15\0"+
    "\1\7\1\0\2\7\1\10\1\7\1\0\1\114\5\0"+
    "\1\41\32\7\15\0\1\7\1\0\2\7\1\10\1\7"+
    "\1\0\1\7\5\0\1\41\7\7\1\115\22\7\15\0"+
    "\1\7\1\0\2\7\1\10\1\7\1\0\1\7\5\0"+
    "\1\41\17\7\1\116\12\7\15\0\1\7\1\0\2\7"+
    "\1\10\1\7\1\0\1\7\5\0\1\41\10\7\1\117"+
    "\2\7\1\120\16\7\15\0\1\7\1\0\2\7\1\10"+
    "\1\7\1\0\1\7\5\0\1\41\4\7\1\71\25\7"+
    "\15\0\1\7\1\0\2\7\1\10\1\7\1\0\1\7"+
    "\5\0\1\41\11\7\1\121\20\7\15\0\1\7\1\0"+
    "\2\7\1\10\1\7\1\0\1\7\5\0\1\41\11\7"+
    "\1\122\20\7\15\0\1\7\1\0\2\7\1\10\1\7"+
    "\1\0\1\7\5\0\1\41\12\7\1\123\17\7\15\0"+
    "\1\7\1\0\2\7\1\10\1\7\1\0\1\7\5\0"+
    "\1\41\14\7\1\124\15\7\15\0\1\7\1\0\2\7"+
    "\1\10\1\7\1\0\1\7\5\0\1\41\12\7\1\67"+
    "\17\7\15\0\1\7\1\0\2\7\1\10\1\7\1\0"+
    "\1\7\5\0\1\41\15\7\1\67\14\7\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3604];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\11\1\2\11\7\1\12\11\2\1\1\0"+
    "\1\1\1\11\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ConcordionLexer(){
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ConcordionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ConcordionTypes.EXAMPLE_NAME;
            }
          case 22: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          case 23: break;
          case 3: 
            { return ConcordionTypes.IDENTIFIER;
            }
          case 24: break;
          case 4: 
            { return ConcordionTypes.INTEGER_LITERAL;
            }
          case 25: break;
          case 5: 
            { return TokenType.WHITE_SPACE;
            }
          case 26: break;
          case 6: 
            { return ConcordionTypes.DOT;
            }
          case 27: break;
          case 7: 
            { return ConcordionTypes.STRING_LITERAL;
            }
          case 28: break;
          case 8: 
            { return ConcordionTypes.COMMAND;
            }
          case 29: break;
          case 9: 
            { return ConcordionTypes.COLON;
            }
          case 30: break;
          case 10: 
            { return ConcordionTypes.LPARENTH;
            }
          case 31: break;
          case 11: 
            { return ConcordionTypes.RPARENTH;
            }
          case 32: break;
          case 12: 
            { return ConcordionTypes.LBRACKET;
            }
          case 33: break;
          case 13: 
            { return ConcordionTypes.RBRACKET;
            }
          case 34: break;
          case 14: 
            { return ConcordionTypes.LBRACE;
            }
          case 35: break;
          case 15: 
            { return ConcordionTypes.RBRACE;
            }
          case 36: break;
          case 16: 
            { return ConcordionTypes.COMA;
            }
          case 37: break;
          case 17: 
            { return ConcordionTypes.HASH;
            }
          case 38: break;
          case 18: 
            { return ConcordionTypes.EQ;
            }
          case 39: break;
          case 19: 
            { return ConcordionTypes.SEMICOLON;
            }
          case 40: break;
          case 20: 
            { return ConcordionTypes.DOUBLE_LITERAL;
            }
          case 41: break;
          case 21: 
            { return ConcordionTypes.DICTIONARY;
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
